package org.jooq.mcve.test.java;

import org.jooq.DSLContext;
import org.jooq.impl.DSL;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.sql.Connection;
import java.sql.DriverManager;

import static org.jooq.generated.tables.Mcve.MCVE;
import static org.junit.Assert.assertEquals;

public class JavaTest {

    public static final String DATA = "01234567".repeat(1024);
    
    public Connection connection;
    public DSLContext ctx;

    @Before
    public void setup() throws Exception {
        connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "system", "oracle");
        ctx = DSL.using(connection);
        ctx.delete(MCVE).execute();
    }

    @After
    public void after() throws Exception {
        ctx = null;
        connection.close();
        connection = null;
    }

    @Test
    public void failsWithOra03146ForSomeLargerData() {
        ctx.mergeInto(MCVE).usingDual()
                .on(MCVE.ID.eq(42L))
                .whenMatchedThenUpdate()
                .set(MCVE.DATA, DATA)
                .whenNotMatchedThenInsert(MCVE.ID, MCVE.DATA)
                .values(42L, DATA)
                .execute();

        var record = ctx.fetchOne(MCVE, MCVE.ID.eq(42L));
        assertEquals(record.getId().longValue(), 42);
    }

    @Test
    public void workaroundThatWorksForReallyLargeData() {
        ctx.mergeInto(MCVE).usingDual()
                .on(MCVE.ID.eq(42L))
                .whenNotMatchedThenInsert(MCVE.ID)
                .values(42L)
                .execute();
        ctx.update(MCVE)
                .set(MCVE.DATA, DATA)
                .where(MCVE.ID.eq(42L))
                .execute();

        var record = ctx.fetchOne(MCVE, MCVE.ID.eq(42L));
        assertEquals(record.getId().longValue(), 42);
        
    }
}
